Levels of access to applications
================================

Mainly django-roles is about setting roles access to views. This is done in
Admin creating an :class:`ViewAccess` object for each view. There are 3
possible type of access to be set:

* Public: Any user can access the view.
* Authorized: Only authorized :class:`django.contrib.auth.User` can access
  the view. Is equivalent to
  :func:`django.contrib.auth.decorators.login_required`.
* By roles: Only :class:`django.contrib.auth.User` belonging to
  :class:`django.contrib.auth.Group` that has been granted access to the
  view can access the view.


Types of applications
=====================

NOT_SECURED
+++++++++++
List of applications not under site security.

The concept of NOT_SECURED application is to put together all applications that
not provide any view (no URLConf defined for the application). There are no
views with the need to be secured or not.

WARNING:
If an application is NOT_SECURED and have views, these views will be accessed
by everyone.

PUBLIC
++++++
List of applications mainly for public access.

In PUBLIC applications views without an :class:`roles.models.ViewAccess`
object associated will no require authentication (user to be logged in) and
will have no security configured.


SECURED
+++++++
When application is declared as a SECURED application, the views without
any ViewAccess configured will require the user to be logged. In other
words when a view has no :class:`roles.models.ViewAccess` object associated
with it, it will behave as if it secure is *Authorized*



Not configuration
+++++++++++++++++
If an application is not declared as any of the others, but there is an
:class:`roles.models.ViewAccess` object associated for an application's view,
and the view is protected with decorator or middleware is being used,
ViewAccess object will be used to restrict the access.
